import js from "@eslint/js";
import globals from "globals";
import tseslint from "typescript-eslint";
import pluginReact from "eslint-plugin-react";
import { defineConfig } from "eslint/config";

export default defineConfig([
  {
    ignores: [
      "dist/**",
      "node_modules/**",
      "supabase/migrations/**",
      "src/vite-env.d.ts",
      "src/lib/database.types.ts", // Ignore autogenerated Supabase types
      "postcss.config.js",
      "open-all-files.js",
      "scripts/typegen.cjs",
    ]
  },

  js.configs.recommended,

  {
    languageOptions: {
      ecmaVersion: "latest",
      sourceType: "module",
      globals: { ...globals.browser }
    }
  },

  // Type-aware TS configs ONLY for src
  ...tseslint.configs.recommendedTypeChecked.map(cfg => ({
    ...cfg,
    files: ["src/**/*.{ts,tsx}"],
    languageOptions: {
      ...(cfg.languageOptions || {}),
      parserOptions: {
        ...(cfg.languageOptions?.parserOptions || {}),
        project: "./tsconfig.eslint.json"
      }
    }
  })),

  // Strict TS rules for .ts/.tsx files in src
  {
    files: ["src/**/*.{ts,tsx}"],
    rules: {
      "@typescript-eslint/no-unused-vars": "error",
      "@typescript-eslint/no-explicit-any": "error",
      "@typescript-eslint/no-floating-promises": "error",
      "@typescript-eslint/no-misused-promises": "error",
      "@typescript-eslint/no-unnecessary-type-assertion": "error",
      "@typescript-eslint/strict-boolean-expressions": "warn",
      "@typescript-eslint/explicit-function-return-type": [
        "warn",
        {
          allowExpressions: true,
          allowTypedFunctionExpressions: true,
          allowHigherOrderFunctions: true,
          allowConciseArrowFunctionExpressionsStartingWithVoid: true
        }
      ]
    }
  },
  // Override for React .tsx files: allow implicit return type for components
  {
    files: ["src/**/*.tsx"],
    rules: {
      "@typescript-eslint/explicit-function-return-type": [
        "off"
      ]
    }
  },

  // React strict config for .jsx/.tsx files in src
  {
    files: ["src/**/*.{jsx,tsx}"],
    plugins: { react: pluginReact },
    settings: {
      react: { version: "detect", jsxRuntime: "automatic" }
    },
    languageOptions: {
      parserOptions: { ecmaFeatures: { jsx: true } }
    },
    rules: {
      "react/react-in-jsx-scope": "off",
      "react/prop-types": "off",
      "react/display-name": "error",
      "react/no-unescaped-entities": "error",
      "react/no-children-prop": "error"
    }
  },

  // Node.js config files (no type-aware TS rules here)
  {
    files: [
      "*.config.js",
      "*.config.ts",
      "eslint.config.js"
    ],
    languageOptions: {
      globals: { ...globals.node }
    },
    rules: {
      "@typescript-eslint/no-var-requires": "off"
    }
  },
  // ESM config files
  {
    files: ["eslint.config.js", "vite.config.ts"],
    languageOptions: { sourceType: "module" }
  },
  // CJS config files
  {
    files: ["tailwind.config.js", "postcss.config.js"],
    languageOptions: { sourceType: "commonjs" }
  }
]);